function handles = CreateAppComponents(handles)
%CREATEAPPCOMPONENTS Set up Layouts and Components of FCP-App.

%% Edit Function Panel

% Import edit functions from file
% func_names = UtilityFcn.CreateFcnNamesFromClass(EditFunctions, 'Qualifier', 'static');

processing_panel = uix.BoxPanel('Parent', handles.processing_container,...
    'BorderType', 'none',...
    'Title', 'Dataprocessing',...
    'Tag', 'processing_panel',...
    'Padding', 5);

processing_panel_hbox = uix.HBox('Parent', processing_panel,...
    'Tag', 'processing_panel_vbox');


% create root button in procedure_subpanel_hbox to obtain a curve without
% data processing
proc_root_btn = uicontrol('Parent', processing_panel_hbox,...
    'Style', 'togglebutton',...
    'String', '...',...
    'Value', 1,...
    'Tag', 'procedure_root_btn',...
    'Callback', @Callbacks.ProcRootBtnCallback);
processing_panel_hbox.Widths = 120;

handles.guiprops.Panels.processing_panel = processing_panel_hbox;
handles.guiprops.Features.proc_root_btn = proc_root_btn;
handles.guiprops.Features.edit_buttons = [];

%% General Settings Panel
general_settings_panel = uix.BoxPanel('Parent', handles.general_settings_container,...
   'BorderType', 'none',...
   'Title', 'General Settings',...
   'Tag', 'general_settings_panel',...
   'Padding', 10);
general_settings_scrollingpanel = uix.ScrollingPanel('Parent', general_settings_panel,...
    'Tag', 'general_settings_scrollingpanel');

general_settings_grid = uix.Grid('Parent', general_settings_scrollingpanel,...
    'Spacing', 5,...
    'Tag', 'general_settings_grid');

CurvePlotParent = general_settings_grid;

curve_parts_text = uicontrol('Parent', CurvePlotParent,...
    'Style', 'text',...
    'String', 'Parts:',...
    'HorizontalAlignment', 'left',...
    'Tag', 'curve_parts_text');

curve_segments_text = uicontrol('Parent', CurvePlotParent,...
    'Style', 'text',...
    'String', 'Segments:',...
    'HorizontalAlignment', 'left',...
    'Tag', 'curve_segment_text');

curve_xchannel_text = uicontrol('Parent', CurvePlotParent,...
    'Style', 'text',...
    'String', 'xchannel:',...
    'HorizontalAlignment', 'left',...
    'Tag', 'curve_xchannel_text');

curve_ychannel_text = uicontrol('Parent', CurvePlotParent,...
    'Style', 'text',...
    'String', 'ychannel:',...
    'HorizontalAlignment', 'left',...
    'Tag', 'curve_ychannel_text');

curve_parts_popup = uicontrol('Parent', CurvePlotParent,...
    'Style', 'popupmenu',...
    'String', {'All', 'Trace', 'Retrace'},...
    'HorizontalAlignment', 'left',...
    'Tag', 'curve_parts_popup',...
    'Callback', {@Callbacks.UpdateAxesCallback, handles});

curve_segments_popup = uicontrol('Parent', CurvePlotParent,...
    'Style', 'popupmenu',...
    'String', 'no segments...',...
    'HorizontalAlignment', 'left',...
    'Tag', 'curve_segments_popup',...
    'Callback', {@Callbacks.UpdateAxesCallback, handles});

curve_xchannel_popup = uicontrol('Parent', CurvePlotParent,...
    'Style', 'popupmenu',...
    'String', 'no xchannels...',...
    'HorizontalAlignment', 'left',...
    'Tag', 'curve_xchannel_popup',...
    'Callback', {@Callbacks.UpdateAxesCallback, handles});
curve_xchannel_popup.UserData.HasDefaultValue = 0;

curve_ychannel_popup = uicontrol('Parent', CurvePlotParent,...
    'Style', 'popupmenu',...
    'String', 'no ychannels...',...
    'HorizontalAlignment', 'left',...
    'Tag', 'curve_ychannel_popup',...
    'Callback', {@Callbacks.UpdateAxesCallback, handles});
curve_ychannel_popup.UserData.HasDefaultValue = 0;

elementNum = round(length(allchild(general_settings_grid))/2);
general_settings_grid.Widths = [-1 -1];
general_settings_grid.Heights = 30*ones(1, elementNum);

set(general_settings_scrollingpanel,...
    'MinimumHeights', 100,...
    'MinimumWidths', 150);

% fill channel popup menu


handles.guiprops.Panels.general_settings_panel = general_settings_grid;

handles.guiprops.Features.curve_parts_text = curve_parts_text;
handles.guiprops.Features.curve_segments_text = curve_segments_text;
handles.guiprops.Features.curve_xchannel_text = curve_xchannel_text;
handles.guiprops.Features.curve_ychannel_text = curve_ychannel_text;
handles.guiprops.Features.curve_xchannel_popup = curve_xchannel_popup;
handles.guiprops.Features.curve_ychannel_popup = curve_ychannel_popup;
handles.guiprops.Features.curve_parts_popup = curve_parts_popup;
handles.guiprops.Features.curve_segments_popup = curve_segments_popup;

% if curve_parts_popup.Value changes
handles.listeners.addListener(handles.guiprops.Features.curve_parts_popup, 'Value', 'PostSet',...
    {@Callbacks.UpdatePopupMenuCallback, handles});

% if DataImport finished
handles.listeners.addListener(handles.guiprops, 'UpdateObject',...
    {@Callbacks.UpdatePopupMenuCallback, handles});

%% Processing Information Panel
processing_information_panel = uix.BoxPanel('Parent', handles.processing_information_container,...
    'BorderType', 'none',...
    'Title', 'Processing Information',...
    'Tag', 'processing_information_panel',...
    'Padding', 10);

processing_information_scrollingpanel = uix.ScrollingPanel('Parent', processing_information_panel,...
    'Tag', 'processing_information_scrollpanel');

proc_info_vbox = uix.VBox('Parent', processing_information_scrollingpanel,...
    'Tag', 'processing_information_hbox',...
    'Spacing', 0);

proc_status_info_grid = uix.Grid('Parent', proc_info_vbox,...
    'Spacing', 5,...
    'Tag', 'processing_saving_information_grid');

curve_type_grid = uix.Grid('Parent', proc_info_vbox,...
    'Spacing', 5,...
    'Tag', 'curve_type_hbox');

proc_info_grid = uix.Grid('Parent', proc_info_vbox,...
    'Spacing', 5,...
    'Tag', 'processing_information_grid');

% led status informations
tooltip = 'Displays wether a Savepath for processed curves has been specified.';
save_curve_text = TextLabel('Parent', proc_status_info_grid,...
    'String', 'Save Curves:');
save_curve_text.Tag = 'save_curve_text';
save_curve_text.TooltipString = tooltip;

tooltip = sprintf('Displays wether Values for Springconstant and Sensitivity have been specified \n %s',...
    'and Vertical Deflection has been transformed to units of force.');

calibration_text = TextLabel('Parent', proc_status_info_grid,...
    'String', 'Calibration Status:');
calibration_text.Tag = 'save_calibration_text';
calibration_text.TooltipString = tooltip;

save_curve_status = uicontrol('Parent', proc_status_info_grid,...
    'Style', 'text',...
    'BackgroundColor', 'red',...
    'Tag', 'save_curve_status');

calibration_status = uicontrol('Parent', proc_status_info_grid,...
    'Style', 'text',...
    'BackgroundColor', 'red',...
    'Tag', 'save_calibration_status');

% force-curve type information
curve_type_text = TextLabel('Parent', curve_type_grid,...
    'String', 'Force-Curve Type:');
curve_type_text.Tag = 'curve_type_text';

easy_import_text = TextLabel('Parent', curve_type_grid,...
    'String', 'Easy Import:');
easy_import_text.Tag = 'easy_import_text';

curve_type_status = TextLabel('Parent', curve_type_grid,...
    'String', handles.curveprops.settings.InformationStyle,...
    'HorizontalAlignment', 'right');
curve_type_status.Tag = 'curve_type_status';

string =  mat2str(handles.curveprops.settings.EasyImport);
string(1) = upper(string(1)); 
easy_import_status = TextLabel('Parent', curve_type_grid,...
    'String', string,...
    'HorizontalAlignment', 'right');
easy_import_status.Tag = 'easy_import_status';

% other processing informations
count_processed_text = uicontrol('Parent', proc_info_grid,...
    'Style', 'text',...
    'String', 'processed:',...
    'HorizontalAlignment', 'left',...
    'Tag', 'count_processed_text');

count_unprocessed_text = uicontrol('Parent', proc_info_grid,...
    'Style', 'text',...
    'String', 'unprocessed:',...
    'HorizontalAlignment', 'left',...
    'Tag', 'count_unprocessed_text');

count_discarded_text = uicontrol('Parent', proc_info_grid,...
    'Style', 'text',...
    'String', 'discarded:',...
    'HorizontalAlignment', 'left',...
    'Tag', 'count_discarded_text');

count_processed_num = uicontrol('Parent', proc_info_grid,...
    'Style', 'text',...
    'String', '...',...
    'Tag', 'save_procedure_num');

count_unprocessed_num = uicontrol('Parent', proc_info_grid,...
    'Style', 'text',...
    'String', '...',...
    'Tag', 'save_unprocessed_num');

count_discarded_num = uicontrol('Parent', proc_info_grid,...
    'Style', 'text',...
    'String', '...',...
    'Tag', 'save_discarded_num');

elementNum = round(length(allchild(proc_status_info_grid))/2);
proc_status_info_grid.Widths = [-1 -0.1];
proc_status_info_grid.Heights = 15*ones(1, elementNum);

elementNum = round(length(allchild(curve_type_grid))/2);
curve_type_grid.Widths = [-1 -1];
curve_type_grid.Heights = 15*ones(1, elementNum);

elementNum = round(length(allchild(proc_info_grid))/2);
proc_info_grid.Widths = [-1 -0.1];
proc_info_grid.Heights = 15*ones(1, elementNum);

proc_info_vbox.Heights = [-1 -0.75 -1]; 

set(processing_information_scrollingpanel,...
    'MinimumHeights', 100,...
    'MinimumWidths', 150);

handles.guiprops.Panels.processing_information_panel = proc_info_vbox;

handles.guiprops.Features.save_curve_text = save_curve_text;
handles.guiprops.Features.calibration_text = calibration_text;
handles.guiprops.Features.save_curve_status = save_curve_status;
handles.guiprops.Features.calibration_status = calibration_status;

handles.guiprops.Features.curve_type_text = curve_type_text;
handles.guiprops.Features.easy_import_text = easy_import_text;
handles.guiprops.Features.curve_type_status = curve_type_status;
handles.guiprops.Features.easy_import_status = easy_import_status;

handles.guiprops.Features.count_processed_text = count_processed_text;
handles.guiprops.Features.count_unprocessed_text = count_unprocessed_text;
handles.guiprops.Features.count_discarded_text = count_discarded_text;
handles.guiprops.Features.count_processed_num = count_processed_num;
handles.guiprops.Features.count_unprocessed_num = count_unprocessed_num;
handles.guiprops.Features.count_discarded_num = count_discarded_num;

% % create property listeners for status labels
% save_curve_status
handles.listeners.addListener(handles.guiprops.SavePathObject, 'path', 'PostSet',...
    {@Callbacks.UpdateSaveCurveStatusCallback, handles});

% calibration_status
handles.listeners.addListener(handles.curveprops, 'Calibrated', 'PostSet',...
    {@Callbacks.UpdateCalibrationStatusCallback, handles});

%% Results Panel
results_panel = uix.BoxPanel('Parent', handles.results_container,...
    'BorderType', 'none',...
    'Title', 'Results',...
    'Tag', 'results_panel',...
    'Padding', 10);
results_scrollingpanel = uix.ScrollingPanel('Parent', results_panel,...
    'Tag', 'results_scrollingpanel');
handles.guiprops.Panels.results_panel = results_scrollingpanel;

%% Edit Curve Table
curvelist_hbox = uix.HBox('Parent', handles.curvelist_container,...
    'Tag', 'curvelist_hbox');
edit_curve_table = uitable('Parent', curvelist_hbox,...
    'Tag', 'edit_curve_table',...
    'Enable', 'on',...
    'CellSelectionCallback', {@Callbacks.CellSelectionCallback, handles});
edit_curve_table.ColumnName = {'Name', 'Status'};
UtilityFcn.CalculateColumnWidth(edit_curve_table, [0.75 0.25]);

handles.guiprops.Features.edit_curve_table = edit_curve_table;

% create property listener for table data

% if a afm-cuve is added to curveprops
handles.listeners.addListener(handles.curveprops, 'DynamicProps', 'PostSet',...
    {@Callbacks.AddTableDataCallback, handles});

%% Processing Buttons
button_group_vbox = uix.VBox('Parent', handles.processing_button_container,...
    'Tag', 'button_group_vbox',...
    'Spacing', 10);

keep_button = uicontrol('Parent', button_group_vbox,...
    'Style', 'pushbutton',...
    'String', 'Keep',...
    'Tag', 'keep_btn',...
    'Callback', {@Callbacks.KeepBtnCallback, handles});

discard_button = uicontrol('Parent', button_group_vbox,...
    'Style', 'pushbutton',...
    'String', 'Discard',...
    'Tag', 'discard_btn',...
    'Callback', {@Callbacks.DiscardBtnCallback, handles});

undo_button = uicontrol('Parent', button_group_vbox,...
    'Style', 'pushbutton',...
    'String', 'Undo',...
    'Tag', 'undo_btn',...
    'Callback', {@Callbacks.UndoBtnCallback, handles});

keep_all_button = uicontrol('Parent', button_group_vbox,...
    'Style', 'pushbutton',...
    'String', 'Keep and apply to all',...
    'Tag', 'keep_all_btn',...
    'Callback', {@Callbacks.KeepAllBtnCallback, handles});

undo_all_button = uicontrol('Parent', button_group_vbox,...
    'Style', 'pushbutton',...
    'String', 'Undo all',...
    'Tag', 'undo_all_btn',...
    'Callback', {@Callbacks.UndoAllBtnCallback, handles});

complete_processing_button = uicontrol('Parent', button_group_vbox,...
    'Style', 'pushbutton',...
    'String', 'Complete Processing',...
    'Tag', 'complete_processing_btn',...
    'Callback', {@Callbacks.CompleteProcessingBtnCallback, handles});

clear_all_curves_button = uicontrol('Parent', button_group_vbox,...
    'Style', 'pushbutton',...
    'String', 'Clear all Curves',...
    'Tag', 'clear_all_curves_button',...
    'Callback', {@Callbacks.ClearAllCurvesBtnCallback, handles});

handles.guiprops.Features.processing_buttons.keep_button = keep_button;
handles.guiprops.Features.processing_buttons.discard_button = discard_button;
handles.guiprops.Features.processing_buttons.undo_button = undo_button;
handles.guiprops.Features.processing_buttons.keep_all_button = keep_all_button;
handles.guiprops.Features.processing_buttons.undo_all_button = undo_all_button;
handles.guiprops.Features.processing_buttons.complete_processing_button = complete_processing_button;
handles.guiprops.Features.processing_buttons.clear_all_curves_button = clear_all_curves_button;

%% Notifications
notification_panel = uix.Panel('Parent', handles.notification_container,...
    'BorderType', 'none',...
    'Title', 'Notifications',...
    'Tag', 'notification_panel',...
    'Padding', 10); 
notification_scrollingpanel = uix.ScrollingPanel('Parent', notification_panel,...
    'Tag', 'notification_scrollpanel');
notification_hbox = uix.HBox('Parent', notification_scrollingpanel,...
    'Tag', 'notification_hbox');
handles.guiprops.Panels.notification_panel = notification_hbox;

%% create MainFig
handles = UtilityFcn.SetupMainFigure(handles);

%% Update handles structure
guidata(handles.figure1, handles);
