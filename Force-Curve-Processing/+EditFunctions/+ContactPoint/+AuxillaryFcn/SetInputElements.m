function SetInputElements(varargin)
%SETINPUTELEMENTS Setup Graphical Elements for Inputparameter
%   Set Graphical Elements for the aquisition of Inputparameters of
%   the activated Editfunction

    %% handles and results-object
    main = findobj(allchild(groot), 'Type', 'Figure', 'Tag', 'figure1');
    handles = guidata(main);
    results = getappdata(handles.figure1, 'ContactPoint');
    
    %% variables
    curve_part_popup_string = handles.guiprops.Features.curve_parts_popup.String;
    curve_segment_popup_string = handles.guiprops.Features.curve_segments_popup.String;
    if isempty(results.part_index)
        curve_part_popup_value = handles.guiprops.Features.curve_parts_popup.Value;
    else
        curve_part_popup_value = results.part_index;
    end
    if isempty(results.segment_index)
        curve_segment_popup_value = handles.guiprops.Features.curve_segments_popup.Value;
    else
        curve_segment_popup_value = results.segment_index;
    end
    
    %% main panels
    container = varargin{1};
    panel = uix.Panel('Parent', container,...
        'Title', 'Settings',...
        'Tag', 'cp_settings_panel',...
        'Padding', 10);
    vbox = uix.VBox('Parent', panel,...
        'Tag', 'cp_settings_vbox');
    
    grid1 = uix.Grid('Parent', vbox,...
        'Spacing', 5,...
        'Tag', 'cp_settings_grid_1');
    grid2 = uix.Grid('Parent', vbox,...
        'Spacing', 5,...
        'Tag', 'cp_settings_grid_2');
    
    %% disclaimer
    format = '%s\n%s\n%s';
    disclaimer_text = sprintf(format,...
        ['- contact point is the last intersection point of the chosen',...
        'curve segment and zero.'],...
        ['- If there is no intersection point from chosen curve segment',...
        'and zero, the contact point is the last point of the segment.'],...
        ['- It is strongly recommended to calculate the Baseline',...
        'correction prior to this operation.']);
    disclaimer = uicontrol('Parent', grid1,...
        'Style', 'text',...
        'HorizontalAlignment', 'left',...
        'Tag', 'cp_settings_disclaimer_label',...
        'String', disclaimer_text);
    grid1.Heights = -1;
    grid1.Widths = -1;
    
    %% part and segment choice
    part_label = uicontrol('Parent', grid2,...
        'Style', 'text',...
        'HorizontalAlignment', 'left',...
        'Tag', 'cp_settings_curvepart_label',...
        'String', 'Parts:');
    segment_label = uicontrol('Parent', grid2,...
        'Style', 'text',...
        'HorizontalAlignment', 'left',...
        'Tag', 'cp_settings_curvesegment_label',...
        'String', 'Segments:');
    
    part_popup = uicontrol('Parent', grid2,...
        'Style', 'popupmenu',...
        'Tag', 'cp_settings_curvepart_popup',...
        'String', curve_part_popup_string,...
        'Value', curve_part_popup_value,...
        'Callback', @EditFunctions.ContactPoint.Callbacks.ElementCallbacks.SettingsPartCallback);
    segment_popup = uicontrol('Parent', grid2,...
        'Style', 'popupmenu',...
        'Tag', 'cp_settings_curvesegment_popup',...
        'String', curve_segment_popup_string,...
        'Value', curve_segment_popup_value,...
        'Callback', @EditFunctions.ContactPoint.Callbacks.ElementCallbacks.SettingsSegmentCallback);
    grid2.Heights = [20 20];
    grid2.Widths = [-1 -1];
    
    %% update handles and results-object
    
    results = results.addproperty('input_elements');
    
    input_elements.panel = panel;
    input_elements.vbox = vbox;
    input_elements.grid1 = grid1;
    input_elements.grid2 = grid2;
    
    % grid1
    input_elements.disclaimer = disclaimer;
    
    % grid2
    input_elements.curve_part_label = part_label;
    input_elements.curve_segment_label = segment_label;
    input_elements.curve_part_popup = part_popup;
    input_elements.curve_segment_popup = segment_popup;
    
    % other
    results.part_index = curve_part_popup_value;
    results.segment_index = curve_segment_popup_value;
    
    results.input_elements = input_elements;
    
    setappdata(handles.figure1, 'ContactPoint', results);
    guidata(handles.figure1, handles);

end % SetInputElements

